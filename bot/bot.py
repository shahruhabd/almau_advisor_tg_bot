from asyncio import Server
from http import server
import os
import django
os.environ['PYTHONHTTPSVERIFY'] = '0'
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "Almau_Advisor.settings")
django.setup()
import ldap3
from ldap3.core.exceptions import LDAPBindError
import ssl
import requests
from telegram.utils.request import Request

AD_SERVER = '10.10.1.2'

import ssl
ssl._create_default_https_context = ssl._create_unverified_context

from telegram import Bot, Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, ConversationHandler
from django.conf import settings

from django.contrib.auth.models import User
from Advisor.models import Student, Specialty, FAQ, Question
from django.db.models import Count, Q
from helpdesk.models import Lecturer, HelpDeskUser, HelpDeskRequest

from datetime import datetime

def check_ad_credentials_stud(AD_SERVER, username, password):
    base_dn = 'OU=STUDENTS,DC=iab,DC=kz'
    search_filter = f'(userPrincipalName={username})'

    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DN –∏ –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    # conn = ldap3.Connection(AD_SERVER, 's.abdugapar@almau.edu.kz', 'mjE024', auto_bind=True)
    try:
        conn = ldap3.Connection(AD_SERVER, username, password, auto_bind=True)
        if not conn.bind():
            print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LDAP")
            return False

        if conn.search(base_dn, search_filter):
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–∞–π–¥–µ–Ω")
            return True
        else:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except LDAPBindError:
        print("–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return False

def check_ad_credentials_teach(AD_SERVER, username, password):
    base_dn = 'OU=UsersDoc,DC=iab,DC=kz'
    search_filter = f'(userPrincipalName={username})'

    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DN –∏ –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    # conn = ldap3.Connection(AD_SERVER, 's.abdugapar@almau.edu.kz', 'mjE024', auto_bind=True)
    try:
        conn = ldap3.Connection(AD_SERVER, username, password, auto_bind=True)
        if not conn.bind():
            print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LDAP")
            return False

        if conn.search(base_dn, search_filter):
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–∞–π–¥–µ–Ω")
            return True
        else:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except LDAPBindError:
        print("–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return False

#  base_dn = 'OU=STUDENTS,DC=iab,DC=kz'  -  dn –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    
def start(update, context):
    message = update.message or update.callback_query.message

    current_user = context.user_data.get('user')
    current_role = context.user_data.get('role')
    context.user_data['user'] = current_user
    context.user_data['role'] = current_role
    
    if current_user is not None:
        username = current_user.username

        try:
            student = Student.objects.get(username=current_user)
            full_name = student.full_name
        except Student.DoesNotExist:
            full_name = None

        if full_name:
            message.reply_text(f'–ü—Ä–∏–≤–µ—Ç üëã {full_name}! –í–∞—à–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.')
        else:
            message.reply_text(f'{username}. –í–∞—à–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.')


        # –ï–°–õ–ò –°–¢–£–î–ï–ù–¢
        if current_user is not None and context.user_data.get('role') == 'student':
            keyboard = [
                [InlineKeyboardButton("Face ID üÜî", url='https://faceid.almau.edu.kz/')],
                [InlineKeyboardButton("–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã ‚ùì", callback_data='faq')],
                [InlineKeyboardButton("–°–≤—è–∑—å —Å —ç–¥–≤–∞–π–∑–µ—Ä–æ–º üë©‚Äçüè´", callback_data='ask_adviser')],
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)
            update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=reply_markup)

        # –ï–°–õ–ò –ü–†–ï–ü–û–î
        if current_user is not None and context.user_data.get('role') == 'teacher':
            try:
                helpdesk_user = HelpDeskUser.objects.get(user=current_user)
                keyboard = [
                    [InlineKeyboardButton("–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", callback_data='show_request')],
                    [InlineKeyboardButton("–ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data='show_my_requests')],
                    [InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏", callback_data='show_closed_requests')],
                ]
            except HelpDeskUser.DoesNotExist:
                keyboard = [
                    [InlineKeyboardButton("–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º?", callback_data='create_request')]
                ]

            reply_markup = InlineKeyboardMarkup(keyboard)
            update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=reply_markup)

    else:
        update.message.reply_text('ü¶â')
        keyboard = [
            [InlineKeyboardButton("–°—Ç—É–¥–µ–Ω—Ç üë®‚Äçüéì", callback_data='student')],
            [InlineKeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å üë®‚Äçüè´", callback_data='teacher')]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å', reply_markup=reply_markup)
        return ConversationHandler.END

# –ß–ê–°–¢–û –ó–ê–î–ê–í–ê–ï–ú–´–ï –í–û–ü–†–û–°–´
FAQ_QUESTION = range(1)
def faq_command(update, context):
    query = update.callback_query
    query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ö—ç—à-—Ç–µ–≥–æ–º\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –æ–Ω–∞–π –∏–ª–∏ –≤–æ–µ–Ω–Ω–∞—è –∫–∞—Ñ–µ–¥—Ä–∞ –∏–ª–∏ —Ä–∏—Ç–µ–π–∫")
    query.answer()
    return FAQ_QUESTION

def handle_message(update, context):
    user_input = update.message.text

    # –ü–æ–∏—Å–∫ –≤ FAQ
    matching_faqs = FAQ.objects.filter(Q(question__icontains=user_input) | Q(answer__icontains=user_input))

    if matching_faqs.exists():
        response = ''
        for i, faq in enumerate(matching_faqs):
            response += f"{i+1}. {faq.question}\n{faq.answer}\n\n"
        update.message.reply_text(f'{response}\n\n/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    else:
        update.message.reply_text("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return ConversationHandler.END

# –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –î–õ–Ø –°–¢–£–î–ï–ù–¢–û–í
USERNAME, PASSWORD, FULL_NAME, COURSE, SPECIALTY, GENDER, DEPARTMENT = range(7)

def button(update, context):
    context.user_data.clear()
    query = update.callback_query
    query.answer()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if query.data == 'student':
        context.user_data['role'] = 'student'
        context.user_data['chat_id'] = query.message.chat_id
        context.bot.send_message(chat_id=update.effective_chat.id, text="–°—Ç—É–¥–µ–Ω—Ç? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–¥–µ—Å—å. –î–ª—è –æ—Ç–º–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —Å–º–µ–Ω—ã —Ä–æ–ª–∏ –Ω–∞–∂–º–∏—Ç–µ\n/cancel")
        context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
        return USERNAME

def receive_username(update, context):
    username = update.message.text
    if "@almau.edu.kz" not in username:
        username += "@almau.edu.kz"
    context.user_data['auth_username'] = username
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    return PASSWORD

def receive_password(update, context):
    username = context.user_data.get('auth_username')
    password = update.message.text

    if check_ad_credentials_stud(AD_SERVER, username, password):
        user, created = User.objects.get_or_create(username=username)
        if created:
            user.set_password(password)
            user.save()
        context.user_data['user'] = user

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ username –¥–ª—è —Å–≤—è–∑–∏ —Å –æ–±—ä–µ–∫—Ç–æ–º Student
        student, student_created = Student.objects.get_or_create(username=username)
        student.chat_id = update.message.chat_id
        student.save()
        context.user_data['student'] = student

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ —É —Å—Ç—É–¥–µ–Ω—Ç–∞
        if student_created or not student.has_all_required_data():
            update.message.reply_text('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û.')
            return FULL_NAME
        else:
            update.message.reply_text('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ')
            start(update, context)
            return ConversationHandler.END
    else:
        update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')
        context.user_data.clear()
        start(update, context)
        return ConversationHandler.END

def receive_full_name(update, context):
    full_name = update.message.text
    context.user_data['full_name'] = full_name
    keyboard = [['1', '2', '3', '4']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å:", reply_markup=reply_markup)
    return COURSE

def receive_course(update, context):
    course = update.message.text
    context.user_data['course'] = course
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π
    specialties = Specialty.objects.all()
    specialty_list = {str(idx + 1): specialty for idx, specialty in enumerate(specialties)}
    context.user_data['specialty_list'] = specialty_list
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π
    message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –≤–≤–µ–¥—è –µ—ë –Ω–æ–º–µ—Ä:\n" + \
                   "\n".join([f"{index}. {spec.name}" for index, spec in specialty_list.items()])
    update.message.reply_text(message_text)
    return SPECIALTY

def receive_specialty(update, context):
    selection = update.message.text
    specialty_list = context.user_data.get('specialty_list', {})

    if selection.isdigit():
        selection_key = str(int(selection))
        if selection_key in specialty_list:
            specialty = specialty_list[selection_key]
            context.user_data['specialty'] = specialty.name
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –≥–µ–Ω–¥–µ—Ä–∞ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            return receive_gender(update, context)
        else:
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return SPECIALTY
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä.")
        return SPECIALTY

def receive_gender(update, context):
    gender_text = update.message.text
    gender_map = {'–ú—É–∂—Å–∫–æ–π': 'M', '–ñ–µ–Ω—Å–∫–∏–π': 'F'}
    gender = gender_map.get(gender_text, None)
    if gender is None:
        # –ï—Å–ª–∏ –ø–æ–ª –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑
        reply_keyboard = [['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=markup)
        return GENDER
    else:
        # –ü–æ–ª –±—ã–ª –≤—ã–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Å–ø—Ä–æ—Å–∏–º –æ—Ç–¥–µ–ª–µ–Ω–∏–µ
        context.user_data['gender'] = gender
        reply_keyboard = [['–ö–∞–∑–∞—Ö—Å–∫–∏–π', '–†—É—Å—Å–∫–∏–π', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ:", reply_markup=markup)
        return DEPARTMENT

def receive_department(update, context):
    department_text = update.message.text
    department_map = {'–ö–∞–∑–∞—Ö—Å–∫–∏–π': 'KZ', '–†—É—Å—Å–∫–∏–π': 'RU', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π': 'EN'}
    department = department_map.get(department_text, None)
    if department is None:
        # –ï—Å–ª–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑
        reply_keyboard = [['–ö–∞–∑–∞—Ö—Å–∫–∏–π', '–†—É—Å—Å–∫–∏–π', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ:", reply_markup=markup)
        return DEPARTMENT
    else:
        # –û—Ç–¥–µ–ª–µ–Ω–∏–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data['department'] = department
        save_student_data(context.user_data)
        update.message.reply_text("–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

def save_student_data(user_data):
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç Student –∏–∑ user_data
    student = user_data['student']
    student.chat_id = user_data.get('chat_id')
    student.full_name = user_data['full_name']
    student.course = user_data['course']
    student.gender = user_data['gender']
    student.department = user_data['department']

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç Specialty –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    specialty_name = user_data['specialty']
    specialty_obj, created = Specialty.objects.get_or_create(name=specialty_name)

    # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç Specialty –ø–æ–ª—é specialty –≤ –æ–±—ä–µ–∫—Ç–µ Student
    student.specialty = specialty_obj

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç Student
    student.save()

def cancel(update, context):
    context.user_data.clear()
    update.message.reply_text('–ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.')
    return ConversationHandler.END

# –í–û–ü–†–û–° –≠–î–í–ê–ô–ó–ï–†–£
def ask_question(update, context):
    update.callback_query.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.')
    return TYPING_QUESTION  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞

TYPING_QUESTION = range(1)  
def handle_question_text(update, context):
    question_text = update.message.text
    student = context.user_data.get('student')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not student:
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.')
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    text = update.message.text if update.message else update.callback_query.data

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∑–∞–∫—Ä—ã—Ç
    question = Question.objects.filter(
        student=student, 
        status__in=['NEW', 'MAIN_ADVISOR', 'IN_PROCESS']
    ).last()

    # –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ
    if question:
        current_time = datetime.now().strftime('%H:%M, %d/%m/%Y')
        new_entry = {'type': 'question', 'text': text, 'timestamp': current_time}
        if question.conversation:
            question.conversation.append(new_entry)
        else:
            question.conversation = [new_entry]
        question.save()
        text_to_send = '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ç–µ–∫—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.'
    else:
        # –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        assigned_user = User.objects.filter(groups__name='Advisor').annotate(num_requests=Count('assigned_questions')).order_by('num_requests').first()
        new_question = Question.objects.create(
            student=student, 
            status='NEW', 
            conversation=[{
                'type': 'question',
                'text': text,
                'timestamp': datetime.now().strftime('%H:%M, %d/%m/%Y')
            }],
            assigned_user=assigned_user
        )
        text_to_send = '–í–∞—à –≤–æ–ø—Ä–æ—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.'

    update.message.reply_text(text_to_send) if update.message else update.callback_query.message.reply_text(text_to_send)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_non_text_message(update, context):
    update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –º–æ–≥—É –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

# –ó–ê–ö–†–´–¢–ò–ï –ß–ê–¢–ê
def close_chat(update, context):
    student = context.user_data.get('student')
    if student:
        open_question = Question.objects.filter(
            student=student,
            status__in=['NEW', 'IN_PROCESS', 'MAIN_ADVISOR']
        ).order_by('-created_at').first()

        if open_question:
            keyboard = [
                [InlineKeyboardButton("–î–∞", callback_data='close_question_yes')],
                [InlineKeyboardButton("–ù–µ—Ç", callback_data='close_question_no')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            update.message.reply_text('–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω—ã –ª–∏ –≤—ã –æ—Ç–≤–µ—Ç–æ–º?', reply_markup=reply_markup)
        else:
            update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.')
    else:
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.')

def handle_close_response(update, context):
    query = update.callback_query
    query.answer()
    data = query.data
    student = context.user_data.get('student')

    if student:
        open_question = Question.objects.filter(
            student=student,
            status__in=['NEW', 'IN_PROCESS', 'MAIN_ADVISOR']
        ).order_by('-created_at').first()

        if open_question:
            if data == 'close_yes':
                open_question.status = 'CLOSED'  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å "–ó–∞–∫—Ä—ã—Ç"
                open_question.save()
                query.edit_message_text(text="–í–∞—à –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ.")
            elif data == 'close_no':
                # –ù–∞–∑–Ω–∞—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –≥–ª–∞–≤–Ω–æ–º—É —ç–¥–≤–∞–π–∑–µ—Ä—É
                main_advisor = User.objects.filter(groups__name='Main Advisor').first()
                if main_advisor:
                    open_question.assigned_user = main_advisor
                    open_question.status = 'MAIN_ADVISOR'  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —É –≥–ª–∞–≤–Ω–æ–≥–æ —ç–¥–≤–∞–π–∑–µ—Ä–∞"
                    open_question.save()
                    query.edit_message_text(text="–í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –≥–ª–∞–≤–Ω–æ–º—É —ç–¥–≤–∞–π–∑–µ—Ä—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.")
                else:
                    query.edit_message_text(text="–û—à–∏–±–∫–∞: –≥–ª–∞–≤–Ω—ã–π —ç–¥–≤–∞–π–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            query.edit_message_text(text='–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.')
    else:
        query.edit_message_text(text='–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.')


# –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –î–õ–Ø –ü–†–ï–ü–û–î–û–í
def button_teach(update, context):
    query = update.callback_query
    query.answer()

    if query.data == 'teacher':
        context.user_data['role'] = 'teacher'
        context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫?\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–¥–µ—Å—å. –î–ª—è –æ—Ç–º–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —Å–º–µ–Ω—ã —Ä–æ–ª–∏ –Ω–∞–∂–º–∏—Ç–µ\n/cancel")
        context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω :")
        return USERNAME_TEACH
    
USERNAME_TEACH, PASSWORD_TEACH = range(2)

def receive_username_teach(update, context):
    username = update.message.text
    if "@almau.edu.kz" not in username:
        username += "@almau.edu.kz"
    context.user_data['auth_username'] = username
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    return PASSWORD_TEACH

def receive_password_teach(update, context):
    username = context.user_data.get('auth_username')
    password = update.message.text

    if check_ad_credentials_teach(AD_SERVER, username, password):
        user, created = User.objects.get_or_create(username=username)
        if created:
            user.set_password(password)
            user.save()
            lecturer, lecturer_created = Lecturer.objects.get_or_create(
                user=user,
                defaults={'username': username, 'chat_id': update.message.chat_id}
            )
            if lecturer_created:
                update.message.reply_text("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.")
            else:
                lecturer.chat_id = update.message.chat_id
                lecturer.save()
                update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.")
        else:
            lecturer, lecturer_created = Lecturer.objects.get_or_create(
                user=user,
                defaults={'username': username, 'chat_id': update.message.chat_id}
            )
            if not lecturer_created:
                lecturer.chat_id = update.message.chat_id
                lecturer.save()

        context.user_data['user'] = user
        start(update, context)
        return ConversationHandler.END
    else:
        update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')
        context.user_data.clear()
        start(update, context)
        return ConversationHandler.END

DESCRIPTION, AUDITORIUM = range(2)

def start_request(update, context):
    query = update.callback_query
    query.answer()
    query.edit_message_text('–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:')
    return DESCRIPTION

def receive_description(update, context):
    context.user_data['description'] = update.message.text
    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏:')
    return AUDITORIUM

def receive_auditorium(update, context):
    user = context.user_data.get('user')
    description = context.user_data.get('description')
    auditorium_number = update.message.text
    new_request = HelpDeskRequest.objects.create(auditorium_number=auditorium_number, description=description, creator=user)
    update.message.reply_text('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')
    notify_helpdesk_about_new_request(new_request, context.bot)
    return ConversationHandler.END

def notify_helpdesk_about_new_request(request, bot):
    helpdesk_users = HelpDeskUser.objects.all()
    message_text = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: ‚ùó\n–ê—É–¥–∏—Ç–æ—Ä–∏—è: {request.auditorium_number}\n–ü—Ä–æ–±–ª–µ–º–∞: {request.description}\n–û—Ç: {request.creator}"

    for helpdesk_user in helpdesk_users:
        if helpdesk_user.chat_id:  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ chat_id
            keyboard = [
                [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{request.id}")],
                [InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{request.id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            bot.send_message(chat_id=helpdesk_user.chat_id, text=message_text, reply_markup=reply_markup)
        else:
            print(f"–û—à–∏–±–∫–∞: —É HelpDeskUser {helpdesk_user.user.username} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chat_id.")

def accept_request(update, context):
    query = update.callback_query
    request_id = query.data.split('_')[1]
    request = HelpDeskRequest.objects.get(id=request_id)
    
    if request.status == HelpDeskRequest.IN_PROCESS:
        query.edit_message_text(text=f"–ó–∞—è–≤–∫–∞ {request_id} —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
        return
    
    if request.status == HelpDeskRequest.NEW:
        helpdesk_user = HelpDeskUser.objects.get(chat_id=query.message.chat_id)
        
        if hasattr(helpdesk_user, 'user'):
            request.handler = helpdesk_user.user
            request.status = HelpDeskRequest.IN_PROCESS
            request.save()
            query.edit_message_text(text=f"–ó–∞—è–≤–∫–∞ {request_id} –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å Lecturer –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞—è–≤–∫–∏
            try:
                lecturer = Lecturer.objects.get(user=request.creator)
                if lecturer.chat_id:
                    context.bot.send_message(chat_id=lecturer.chat_id, text=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.")
                else:
                    print("–û—à–∏–±–∫–∞: —É —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞—è–≤–∫–∏ –Ω–µ—Ç chat_id.")
            except Lecturer.DoesNotExist:
                print("–û—à–∏–±–∫–∞: —Å–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞—è–≤–∫–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.")
        else:
            query.edit_message_text(text="–û—à–∏–±–∫–∞: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ HelpDesk –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        query.edit_message_text(text="–ó–∞—è–≤–∫–∞ —É–∂–µ –Ω–µ –Ω–æ–≤–∞—è –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–Ω—è—Ç–∞.")

(SELECT_REASON, CUSTOM_REASON) = range(2)

def start_decline(update, context):
    query = update.callback_query
    request_id = query.data.split('_')[1]
    context.user_data['decline_request_id'] = request_id

    keyboard = [
        [InlineKeyboardButton("–ù–µ—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", callback_data='decline_reason_info')],
        [InlineKeyboardButton("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞", callback_data='decline_reason_format')],
        [InlineKeyboardButton("–î–∞–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–ª–æ–≥", callback_data='decline_reason_doc')],
        [InlineKeyboardButton("–°–≤–æ—è –ø—Ä–∏—á–∏–Ω–∞", callback_data='decline_reason_custom')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', reply_markup=reply_markup)

    return SELECT_REASON

def select_reason(update, context):
    query = update.callback_query
    reason_key = query.data.split('_')[2]

    if reason_key == 'custom':
        query.edit_message_text('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:')
        return CUSTOM_REASON
    else:
        reasons = {
            'info': "–ù–µ—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            'format': "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞",
            'doc': "–î–∞–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–ª–æ–≥"
        }
        reason = reasons[reason_key]
        handle_decline(update, context, reason)
        return ConversationHandler.END
    
def custom_reason(update, context):
    custom_reason = update.message.text
    handle_decline(update, context, custom_reason)
    return ConversationHandler.END

def handle_decline(update, context, reason):
    request_id = context.user_data['decline_request_id']
    request = HelpDeskRequest.objects.get(id=request_id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞
    request.status = HelpDeskRequest.CLOSED
    request.is_closed = True
    request.decline_reason = reason

    helpdesk_user = HelpDeskUser.objects.get(user=context.user_data['user'])
    request.handler = helpdesk_user.user
    request.save()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞
    if update.callback_query:
        update.callback_query.message.reply_text(f"–ó–∞—è–≤–∫–∞ {request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–∏—á–∏–Ω–µ: {reason}")
    else:
        # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ —á–µ—Ä–µ–∑ CallbackQuery, –∏—Å–ø–æ–ª—å–∑—É–µ–º update.message
        if update.message:
            update.message.reply_text(f"–ó–∞—è–≤–∫–∞ {request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–∏—á–∏–Ω–µ: {reason}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∑–∞—è–≤–∫–∏
    try:
        lecturer = Lecturer.objects.get(user=request.creator)
        if lecturer.chat_id:
            context.bot.send_message(chat_id=lecturer.chat_id, text=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–∏—á–∏–Ω–µ: {reason}")
        else:
            print("–û—à–∏–±–∫–∞: —É —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞—è–≤–∫–∏ –Ω–µ—Ç chat_id.")
    except Lecturer.DoesNotExist:
        print("–û—à–∏–±–∫–∞: —Å–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞—è–≤–∫–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.")
# def decline_request(update, context):
#     query = update.callback_query
#     request_id = query.data.split('_')[1]
#     request = HelpDeskRequest.objects.get(id=request_id)

#     if request.status in [HelpDeskRequest.IN_PROCESS, HelpDeskRequest.CLOSED]:
#         query.edit_message_text(text=f"–ó–∞—è–≤–∫–∞ {request_id} —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
#         return

#     helpdesk_user = HelpDeskUser.objects.get(chat_id=query.message.chat_id)
    
#     if hasattr(helpdesk_user, 'user'):
#         request.status = HelpDeskRequest.CLOSED
#         request.is_closed = True
#         request.handler = helpdesk_user.user
#         request.save()
#         query.edit_message_text(text=f"–ó–∞—è–≤–∫–∞ {request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        
#         # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç Lecturer –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞—è–≤–∫–∏
#         try:
#             lecturer = Lecturer.objects.get(user=request.creator)
#             if lecturer.chat_id:
#                 context.bot.send_message(chat_id=lecturer.chat_id, text=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
#             else:
#                 print("–û—à–∏–±–∫–∞: —É —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞—è–≤–∫–∏ –Ω–µ—Ç chat_id.")
#         except Lecturer.DoesNotExist:
#             print("–û—à–∏–±–∫–∞: —Å–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞—è–≤–∫–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.")
#     else:
#         query.edit_message_text(text="–û—à–∏–±–∫–∞: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ HelpDesk –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def view_requests_handler(update, context):
    query = update.callback_query
    query.answer()

    requests = HelpDeskRequest.objects.filter(status=HelpDeskRequest.NEW)

    if not requests.exists():
        query.edit_message_text('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.\n/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.')
        return

    for request in requests:
        formatted_date = request.created_at.strftime('%H:%M %d.%m.%Y')
        message_text = (f"üö© –ó–∞—è–≤–∫–∞ #{request.id} –æ—Ç {formatted_date}\n"
                        f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {request.creator}\n"
                        f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {request.handler}\n"
                        f"–ü—Ä–æ–±–ª–µ–º–∞: {request.description}\n"
                        f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {request.auditorium_number}\n"
                        f"–°—Ç–∞—Ç—É—Å: {request.get_status_display()}")

        keyboard = [
            [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{request.id}")],
            [InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{request.id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.bot.send_message(chat_id=query.message.chat_id, text=message_text, reply_markup=reply_markup)

    query.delete_message()

def view_my_requests_handler(update, context):
    query = update.callback_query
    query.answer()

    current_user = context.user_data.get('user')
    my_requests = HelpDeskRequest.objects.filter(handler=current_user, status=HelpDeskRequest.IN_PROCESS)

    if not my_requests.exists():
        query.edit_message_text('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫. /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.')
        return

    message_text = "–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∑–∞—è–≤–æ–∫:\n\n"
    for request in my_requests:
        formatted_date = request.created_at.strftime('%H:%M %d.%m.%Y')
        message_text += (f"üö© –ó–∞—è–≤–∫–∞ #{request.id} –æ—Ç {formatted_date}\n"
                         f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {request.creator}\n"
                         f"–û—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω—ã–π: {request.handler}\n"
                         f"–ü—Ä–æ–±–ª–µ–º–∞: {request.description}\n"
                         f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {request.auditorium_number}\n"
                        f"–°—Ç–∞—Ç—É—Å: {request.get_status_display()}")
        
        keyboard = [[InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close_request_{request.id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        context.bot.send_message(chat_id=query.message.chat_id, text=message_text, reply_markup=reply_markup)

    query.delete_message()

def close_request_handler(update, context):
    query = update.callback_query
    _, action, request_id = query.data.split('_')
    try:
        request = HelpDeskRequest.objects.get(id=request_id)
        request.status = HelpDeskRequest.CLOSED
        request.is_closed = True
        request.save()
        query.edit_message_text(f"–ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞.")
        start(update, context)
    except HelpDeskRequest.DoesNotExist:
        query.edit_message_text(f"–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ —Å ID {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

def view_closed_requests_handler(update, context):
    query = update.callback_query
    query.answer()

    closed_requests = HelpDeskRequest.objects.filter(status=HelpDeskRequest.CLOSED).order_by('-created_at')[:5]

    if not closed_requests.exists():
        query.edit_message_text('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.')
        start(update, context)
        return

    message_text = "–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫:\n\n"
    for request in closed_requests:
        formatted_date = request.created_at.strftime('%H:%M %d.%m.%Y')
        message_text += (f"üö© –ó–∞—è–≤–∫–∞ #{request.id} –æ—Ç {formatted_date}\n"
                         f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {request.creator}\n"
                         f"–û—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω—ã–π: {request.handler}\n"
                         f"–ü—Ä–æ–±–ª–µ–º–∞: {request.description}\n"
                         f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {request.auditorium_number}\n"
                         f"–°—Ç–∞—Ç—É—Å: –ó–∞–∫—Ä—ã—Ç–∞\n\n")

    query.edit_message_text(message_text)

def logout(update, context):
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ CallbackQuery
    if update.callback_query:
        # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ CallbackQuery –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –∏—Ö
        update.callback_query.answer()  # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ CallbackQuery
        update.callback_query.edit_message_text('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.')  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        update.message.reply_text('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.')

    return ConversationHandler.END

def main():
    from telegram.utils.request import Request
    request = Request(con_pool_size=8, urllib3_proxy_kwargs={'verify': False})
    bot = Bot('6381298802:AAFmZVISMBO9k9_T8MwweqBZFXoFuIGgOCg', request=request)
    updater = Updater(bot=bot, use_context=True)
    dp = updater.dispatcher

    # –°–¢–ê–†–¢
    dp.add_handler(CommandHandler('start', start))

    # –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –î–õ–Ø –°–¢–£–î–ï–ù–¢–û–í
    auth_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button, pattern='student')],
        states={
            USERNAME: [MessageHandler(Filters.text & ~Filters.command, receive_username)],
            PASSWORD: [MessageHandler(Filters.text & ~Filters.command, receive_password)],
            FULL_NAME: [MessageHandler(Filters.text & ~Filters.command, receive_full_name)],
            COURSE: [MessageHandler(Filters.text & ~Filters.command, receive_course)],
            SPECIALTY: [MessageHandler(Filters.text & ~Filters.command, receive_specialty)],
            GENDER: [MessageHandler(Filters.regex('^(–ú—É–∂—Å–∫–æ–π|–ñ–µ–Ω—Å–∫–∏–π)$'), receive_gender)],
            DEPARTMENT: [MessageHandler(Filters.regex('^(–ö–∞–∑–∞—Ö—Å–∫–∏–π|–†—É—Å—Å–∫–∏–π|–ê–Ω–≥–ª–∏–π—Å–∫–∏–π)$'), receive_department)],
        },
        fallbacks=[CommandHandler('cancel', cancel), CommandHandler('start', start)]
    )

    dp.add_handler(auth_handler)

    # –ü–ï–†–ï–ü–ò–°–ö–ê
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(ask_question, pattern='ask_adviser')],
        states={
            TYPING_QUESTION: [
                MessageHandler(Filters.text & ~Filters.command, handle_question_text),
                MessageHandler(~Filters.text, handle_non_text_message)  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            ],
        },
        fallbacks=[CommandHandler('logout', logout), CommandHandler('cancel', cancel)]
    )

    dp.add_handler(conv_handler)

    # –ß–ê–°–¢–û –ó–ê–î–ê–í–ê–ï–ú–´–ï –í–û–ü–†–û–°–´
    faq_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(faq_command, pattern='faq')],
        states={
            FAQ_QUESTION: [MessageHandler(Filters.text & ~Filters.command, handle_message)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp.add_handler(faq_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–æ–ø—Ä–æ—Å —ç–¥–≤–∞–π–∑–µ—Ä—É"
    dp.add_handler(CallbackQueryHandler(ask_question, pattern='ask_adviser'))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
    dp.add_handler(CallbackQueryHandler(handle_close_response, pattern='^close_question_'))
    dp.add_handler(CallbackQueryHandler(close_chat, pattern='^close_question_yes$'))
    dp.add_handler(CallbackQueryHandler(close_chat, pattern='^close_question_no$'))

    # –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –î–õ–Ø –ü–†–ï–ü–û–î–û–í
    auth_handler_teach = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_teach, pattern='teacher')],
        states={
            USERNAME_TEACH: [MessageHandler(Filters.text & ~Filters.command, receive_username_teach)],
            PASSWORD_TEACH: [MessageHandler(Filters.text & ~Filters.command, receive_password_teach)],
        },
        fallbacks=[CommandHandler('cancel', cancel), CommandHandler('start', start)]
    )

    dp.add_handler(auth_handler_teach)

    # –í–´–•–û–î
    logout_handler = CommandHandler('logout', logout)
    dp.add_handler(logout_handler)

    # C–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò
    request_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_request, pattern='^create_request$')],
        states={
            DESCRIPTION: [MessageHandler(Filters.text & ~Filters.command, receive_description)],
            AUDITORIUM: [MessageHandler(Filters.text & ~Filters.command, receive_auditorium)],
        },
        fallbacks=[CommandHandler('cancel', cancel), CommandHandler('start', start)]
    )
    dp.add_handler(request_conv_handler)

    dp.add_handler(CallbackQueryHandler(view_requests_handler, pattern='^show_request$'))
    dp.add_handler(CallbackQueryHandler(view_my_requests_handler, pattern='^show_my_requests$'))
    dp.add_handler(CallbackQueryHandler(view_closed_requests_handler, pattern='^show_closed_requests$'))

    #–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò HELPDESK
    dp.add_handler(CallbackQueryHandler(accept_request, pattern='^accept_'))
    decline_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_decline, pattern='^decline_')],
        states={
            SELECT_REASON: [CallbackQueryHandler(select_reason, pattern='^decline_reason_')],
            CUSTOM_REASON: [MessageHandler(Filters.text & ~Filters.command, custom_reason)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    dp.add_handler(decline_handler)
    dp.add_handler(CallbackQueryHandler(close_request_handler, pattern='^close_request_'))

    print("Starting bot...")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()