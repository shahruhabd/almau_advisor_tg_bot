import datetime
import os
import django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "Almau_Advisor.settings")
django.setup()

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters
from django.core.exceptions import ObjectDoesNotExist
from Advisor.models import Student, Question, Specialty, FAQ
from django.contrib.auth.models import User, Group
from django.db.models import Count
from django.conf import settings
import ldap3
from ldap3 import Server, Connection
from django.utils import timezone

AD_SERVER = 'ldap://dca.iab.kz'

def start(update, context):
    keyboard = [
        ["üìö –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"],
        ["‚ùì –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard)
    update.message.reply_text('–ü—Ä–∏–≤–µ—Ç—Å–≤—É–µ–º! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=reply_markup)

def faq_command(update, context):
    faqs = FAQ.objects.all()
    response = ''
    for i, faq in enumerate(faqs):
        response += f"{i+1}. {faq.question}\n{faq.answer}\n\n"
    update.message.reply_text(response)

def ask_command(update, context):
    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω.')
    context.user_data['state'] = 'waiting_for_username'
    

def auth_and_ask_question(update, context):
    if update.message.text == 'üìö –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã':
        faq_command(update, context)
    elif update.message.text == '‚ùì –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å':
        ask_command(update, context)
    else:
        chat_id = update.message.chat_id
        current_state = context.user_data.get('state', None)

        if current_state == 'waiting_for_username':
            current_time = datetime.datetime.now().time()

            start_time = datetime.time(9, 0)
            end_time = datetime.time(18, 0)
            if start_time <= current_time <= end_time:
                username = update.message.text
                if "@almau.edu.kz" not in username:
                    username += "@almau.edu.kz"
                context.user_data['username'] = username
                update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å.')
                context.user_data['state'] = 'waiting_for_password'
            else:
                update.message.reply_text("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 9:00 –¥–æ 18:00. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.") 

        elif current_state == 'waiting_for_password':
            password = update.message.text
            username = context.user_data['username']

            if check_ad_credentials(AD_SERVER, username, password):
                student, created = Student.objects.get_or_create(username=username, defaults={'chat_id': chat_id})

                if created or not (student.full_name and student.course and student.specialty):
                    context.user_data['state'] = 'waiting_for_full_name'
                    context.user_data['student'] = student
                    update.message.reply_text('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û.')
                else:
                    context.user_data['student'] = student
                    context.user_data['state'] = 'authenticated'
                    update.message.reply_text('–°–ø–∞—Å–∏–±–æ, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.')
                    
                print(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {student} –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è")
            else:
                update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')

        elif current_state == 'waiting_for_full_name':
            full_name = update.message.text
            update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å (–æ—Ç 1 –¥–æ 4).')
            context.user_data['full_name'] = full_name
            context.user_data['state'] = 'waiting_for_course'

        elif current_state == 'waiting_for_course':
            course = update.message.text
            update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.')
            specialties = Specialty.objects.all()
            for idx, specialty in enumerate(specialties):
                update.message.reply_text(f'{idx + 1}. {specialty.name}')
            context.user_data['course'] = course
            context.user_data['state'] = 'waiting_for_specialty'

        elif current_state == 'waiting_for_specialty':
            selected_idx = int(update.message.text) - 1
            specialties = Specialty.objects.all()
            if 0 <= selected_idx < len(specialties):
                selected_specialty = specialties[selected_idx]
                context.user_data['specialty'] = selected_specialty
                context.user_data['details_filled'] = True
                context.user_data['state'] = 'authenticated'
                
                # –ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–¥–µ–ª—å Student
                student = context.user_data['student']
                student.full_name = context.user_data['full_name']
                student.course = context.user_data['course']
                student.specialty = selected_specialty
                student.save()
                
                update.message.reply_text('–°–ø–∞—Å–∏–±–æ, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ ')
            else:
                update.message.reply_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        else: 
            ask_question(update, context)


def ask_question(update, context):
    student = context.user_data.get('student')

    if student:
        previous_question = Question.objects.filter(student=student).last()
        advisor_group = Group.objects.get(name='Advisor')
        advisor_users = advisor_group.user_set.annotate(num_requests=Count('assigned_requests')).order_by('num_requests')
        assigned_user = advisor_users.first()
        new_question, created = Question.objects.get_or_create(
            student=student, 
            is_closed=False, 
            defaults={
                'conversation': [],
                'assigned_user': assigned_user
            }
        )

        if previous_question and previous_question.is_closed:
            text_to_send = '–í–∞—à–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞. –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.'
        else:
            text_to_send = '–í–∞—à –≤–æ–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.'

        if new_question.conversation is None:
            new_question.conversation = []

        current_time = timezone.now().strftime('%H:%M')
        new_entry = {'type': 'question', 'text': update.message.text, 'timestamp': current_time}
        new_question.conversation.append(new_entry)
        new_question.save()

        update.message.reply_text(text_to_send)
    else:
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.')

def close_chat(update, context):
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data='yes'),
         InlineKeyboardButton("–ù–µ—Ç", callback_data='no')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω—ã –ª–∏ –≤—ã –æ—Ç–≤–µ—Ç–æ–º?', reply_markup=reply_markup)

def button(update, context):
    student = context.user_data.get('student')
    if student:
        try:
            question = Question.objects.get(student=student)
            query = update.callback_query
            if query.data == 'yes':
                question.status = 'CLOSED'
                question.save()
                query.edit_message_text(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É. –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç.")
            elif query.data == 'no':
                main_advisor_group = Group.objects.get(name='Main Advisor')
                main_advisor_users = main_advisor_group.user_set.all()
                assigned_user = main_advisor_users.first()
                question.assigned_user = assigned_user
                question.status = 'MAIN_ADVISOR'
                question.save()
                query.edit_message_text(text="–í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω –≥–ª–∞–≤–æ–π –≠–¶.")
        except Question.DoesNotExist:
            update.message.reply_text('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.')

def check_ad_credentials(ad_server, username, password):
    with ldap3.Connection(ad_server, user=username, password=password) as conn:
        return conn.bind()

updater = Updater(token=settings.TELEGRAM_BOT_TOKEN, use_context=True)
dp = updater.dispatcher

dp.add_handler(CallbackQueryHandler(button))
dp.add_handler(CommandHandler('start', start))
dp.add_handler(CommandHandler('faq', faq_command))  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /faq
dp.add_handler(CommandHandler('ask', ask_command))
dp.add_handler(CommandHandler('close', close_chat))
dp.add_handler(MessageHandler(Filters.text & ~Filters.command, auth_and_ask_question))

updater.start_polling()
updater.idle()